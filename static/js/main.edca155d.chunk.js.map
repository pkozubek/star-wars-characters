{"version":3,"sources":["images/space.png","serviceWorker.js","components/characters/character.js","components/characters/characters.js","api/api.js","store/action.js","containers/App.js","store/reducer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","CharacterDiv","styled","div","Character","data","characterArray","Object","keys","map","key","name","value","characterKey","renderedData","row","CharactersContainer","connect","charactersArray","characters","filters","characterToDisplay","length","minHeight","gender","filteredArray","trim","filter","singleCharacter","includes","Number","height","filterCharacters","renderCharacters","API_URL_PEOPLE","page","a","axios","get","then","response","results","hasNextPage","next","catch","error","alert","homeworldUrl","speciesUrl","all","spread","homeworldRes","speciesRes","homeName","specieName","loadCharacterData","dispatch","getCharacterData","apiResponse","setNextPagePossible","forEach","created","edited","url","films","vehicles","starships","getAdditionalData","homeworld","species","addCharacter","character","type","characterData","isPossible","isBlocked","GlobalStyle","createGlobalStyle","props","image","AppContainer","FormContainer","form","App","state","loadPage","pageToLoad","loadCharacters","setState","handleInputChange","event","target","this","className","background","onChange","placeholder","disabled","onClick","Component","initialState","isLoading","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edca155d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space.8644e275.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CharacterDiv = styled.div`\r\n  width: calc(60% - 50px);\r\n  border: 1px solid rgba(5, 162, 252, 0.2);\r\n  margin: 25px auto;\r\n  padding: 25px;\r\n  border-radius: 25px;\r\n\r\n  label {\r\n    font-weight: bold;\r\n  }\r\n\r\n  h2 {\r\n    width: 80;\r\n    margin: 5px auto;\r\n    padding-bottom: 5px;\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n  }\r\n`;\r\n\r\nconst Character = ({ data }) => {\r\n  const characterArray = Object.keys(data).map(function(key) {\r\n    return { name: key, value: data[key] };\r\n  });\r\n\r\n  const characterKey = characterArray.name;\r\n\r\n  const renderedData = characterArray.map(row => {\r\n    const { name, value } = row;\r\n\r\n    return name === \"name\" ? (\r\n      <h2 key={characterKey + name}>{value}</h2>\r\n    ) : (\r\n      <p key={characterKey + name}>\r\n        <label>{name}: </label>\r\n        {value}\r\n      </p>\r\n    );\r\n  });\r\n\r\n  return <CharacterDiv>{renderedData}</CharacterDiv>;\r\n};\r\n\r\nexport default Character;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Character from \"./character\";\r\n\r\nconst CharactersContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst Characters = ({ charactersArray, filters }) => {\r\n  const filterCharacters = ({ name, minHeight, gender }, charactersArray) => {\r\n    let filteredArray = charactersArray;\r\n\r\n    if (name.trim() !== \"\") {\r\n      filteredArray = filteredArray.filter(singleCharacter => {\r\n        return singleCharacter.name.includes(name);\r\n      });\r\n    }\r\n\r\n    if (minHeight) {\r\n      filteredArray = filteredArray.filter(singleCharacter => {\r\n        return Number(singleCharacter.height) >= minHeight;\r\n      });\r\n    }\r\n\r\n    if (gender !== \"All\") {\r\n      filteredArray = filteredArray.filter(singleCharacter => {\r\n        return singleCharacter.gender === gender;\r\n      });\r\n    }\r\n\r\n    return filteredArray;\r\n  };\r\n\r\n  const renderCharacters = charactersArray => {\r\n    const filteredCharacters = filterCharacters(filters, charactersArray);\r\n\r\n    const renderedCharacters = filteredCharacters.map(singleCharacter => {\r\n      return <Character key={singleCharacter.name} data={singleCharacter} />;\r\n    });\r\n\r\n    return renderedCharacters;\r\n  };\r\n\r\n  const characterToDisplay =\r\n    charactersArray.length > 0\r\n      ? renderCharacters(charactersArray)\r\n      : \"nie dziala\";\r\n\r\n  return <CharactersContainer>{characterToDisplay}</CharactersContainer>;\r\n};\r\n\r\nconst mapStateToProps = ({ characters }) => {\r\n  return {\r\n    charactersArray: characters\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Characters);\r\n","import axios from \"axios\";\r\n\r\nconst API_URL_PEOPLE = \"https://swapi.co/api/people/?page=\";\r\n\r\nexport async function getCharacterData(page) {\r\n  let data = await axios\r\n    .get(`${API_URL_PEOPLE}${page}`)\r\n    .then(response => {\r\n      const { data } = response;\r\n      const { results, next } = data;\r\n\r\n      return {\r\n        hasNextPage: next !== null,\r\n        results: results\r\n      };\r\n    })\r\n    .catch(error => {\r\n      alert(error);\r\n    });\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getAdditionalData(homeworldUrl, speciesUrl) {\r\n  let data = await axios\r\n    .all([axios.get(homeworldUrl), axios.get(speciesUrl)])\r\n    .then(\r\n      axios.spread((homeworldRes, speciesRes) => {\r\n        const { name: homeName } = homeworldRes.data;\r\n        const { name: specieName } = speciesRes.data;\r\n        return { homeName: homeName, specieName: specieName };\r\n      })\r\n    );\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getDetailsData(homeworld) {}\r\n","import { getCharacterData, getAdditionalData } from \"../api/api\";\r\n\r\nexport const loadCharacterData = page => {\r\n  return dispatch => {\r\n    getCharacterData(page).then(apiResponse => {\r\n      const { results: characters, hasNextPage } = apiResponse;\r\n\r\n      dispatch(setNextPagePossible(hasNextPage));\r\n\r\n      characters.forEach(singleCharacter => {\r\n        delete singleCharacter.created;\r\n        delete singleCharacter.edited;\r\n        delete singleCharacter.url;\r\n        delete singleCharacter.films;\r\n        delete singleCharacter.vehicles;\r\n        delete singleCharacter.starships;\r\n\r\n        getAdditionalData(\r\n          singleCharacter.homeworld,\r\n          singleCharacter.species\r\n        ).then(({ homeName, specieName }) => {\r\n          singleCharacter.homeworld = homeName;\r\n          singleCharacter.species = specieName;\r\n          dispatch(addCharacter(singleCharacter));\r\n        });\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nconst addCharacter = character => {\r\n  return {\r\n    type: \"ADD_CHARACTER\",\r\n    characterData: character\r\n  };\r\n};\r\n\r\nconst setNextPagePossible = isPossible => {\r\n  return {\r\n    type: \"SET_BLOCK\",\r\n    isBlocked: isPossible\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nimport Characters from \"../components/characters/characters\";\nimport { loadCharacterData } from \"../store/action\";\n\nimport background from \"../images/space.png\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: black;\n    background: url(${props => props.image});\n    font-family: 'Open Sans', sans-serif;\n    color: white;\n  }\n\n  h1{\n    color: yellow;\n    font-family: 'Poller One', cursive;\n    margin-top: 10px;\n    text-align: center;\n    font-size: 1.8em;\n  }\n`;\n\nconst AppContainer = styled.div`\n  background: rgba(0, 0, 0, 0.8);\n  width: 80%;\n  padding: 0;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst FormContainer = styled.form`\n  width: 100%;\n  text-align: center;\n\n  input {\n    margin-left: 5px;\n  }\n\n  label {\n    margin: 0 5px 0 5px;\n  }\n\n  button {\n    margin-left: 5px;\n  }\n`;\n\nclass App extends Component {\n  state = {\n    page: 1,\n    name: \"\",\n    minHeight: \"\",\n    gender: \"All\"\n  };\n\n  componentDidMount() {\n    const { page } = this.state;\n    const { loadCharacters } = this.props;\n\n    loadCharacters(page);\n  }\n\n  loadPage = pageToLoad => {\n    const { loadCharacters } = this.props;\n\n    loadCharacters(pageToLoad);\n    this.setState({\n      page: pageToLoad\n    });\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    const { name, minHeight, gender } = this.state;\n    const { isBlocked } = this.props;\n\n    return (\n      <AppContainer className=\"App\">\n        <GlobalStyle image={background} />\n        <h1>STAR WARS CHARACTER WIKI</h1>\n        <FormContainer>\n          <input\n            value={name}\n            onChange={this.handleInputChange}\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"name\"\n          ></input>\n          <input\n            onChange={this.handleInputChange}\n            value={minHeight}\n            name=\"minHeight\"\n            type=\"number\"\n            placeholder=\"height above\"\n          ></input>\n          <label>Gender: </label>\n          <select\n            onChange={this.handleInputChange}\n            value={gender}\n            name=\"gender\"\n          >\n            <option value=\"ll\">All</option>\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n          </select>\n        </FormContainer>\n        <Characters\n          filters={{ name: name, minHeight: minHeight, gender: gender }}\n        />\n        <button\n          disabled={!isBlocked}\n          onClick={() => this.loadPage(this.state.page + 1)}\n        >\n          LoadMore\n        </button>\n      </AppContainer>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isBlocked }) => {\n  return {\n    isBlocked: isBlocked\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadCharacters: page => dispatch(loadCharacterData(page))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","const initialState = {\r\n  characters: [],\r\n  isBlocked: false,\r\n  isLoading: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const { type } = action;\r\n\r\n  switch (type) {\r\n    case \"ADD_CHARACTER\":\r\n      const { characterData } = action;\r\n\r\n      return {\r\n        ...state,\r\n        characters: [...state.characters, characterData]\r\n      };\r\n    case \"SET_BLOCK\":\r\n      const { isBlocked } = action;\r\n      return {\r\n        ...state,\r\n        isBlocked: isBlocked\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\n\nimport App from \"./containers/App\";\nimport reducer from \"./store/reducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}